name: Release Workflow

on:
  push:
    branches:
      - release

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Java (oder eine andere Umgebung, z. B. Node.js, Python)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # oder zulu/adopt/etc.
          java-version: '17'

      # 3. Build the project
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build project
        run: ./gradlew build

      # 4. Bump version and create a tag
      - name: Determine version
        id: version
        run: |
          # Extract the current version from a file, e.g., gradle.properties
          version=$(grep 'version=' gradle.properties | cut -d'=' -f2)
          echo "current_version=$version" >> $GITHUB_ENV
          # Increment the patch version (you can adjust this logic)
          new_version=$(echo $version | awk -F. '{$NF += 1; OFS="."; print $0}')
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version"

      - name: Update version in gradle.properties
        run: |
          sed -i "s/version=$current_version/version=$new_version/" gradle.properties
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push origin release

      - name: Create Git tag
        run: |
          git tag "v$new_version"
          git push origin "v$new_version"

      # 5. Create a release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: "v$new_version"
          release_name: "Release v$new_version"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. Upload build artifacts (e.g., JAR file)
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/your-application.jar
          asset_name: your-application-$new_version.jar
          asset_content_type: application/java-archive
